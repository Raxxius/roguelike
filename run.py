import random


def dungeon_size():
    """
    This function decides the size of the map and runs all
    the individual dungeon generation functions
    """
    print("defining dungeon size...\n")
    size = input("how large would you like the dungeon to be? S, M or L?\n")
    sizef = size[0]
    if "s" in sizef.lower():
        print("Creating a small dungeon")
        dungeon_map = init_dungeon(20, 40)
        room_number = init_rooms(random.randint(8, 12))
        position_rooms(room_number, dungeon_map, 20, 40)
        # print(dungeon_map)
    elif "m" in sizef.lower():
        print("Creating a medium dungeon")
        init_dungeon(50, 50)
        init_rooms(random.randint(20, 30))
    elif "l" in sizef.lower():
        print("Creating a large dungeon")
        init_dungeon(100, 100)
        init_rooms(random.randint(50, 70))
    else:
        print("that's not a valid size you muppet")


def init_dungeon(d_width, d_height):
    """
    This function sets every square in the dungeon to wall
    dungeon size generated by the dungeon size function.

    Function creates a paired dictonary with an x,y coordinate: and True
    This will create a rectangle with all squares set to wall(True).
    """

    print("Generating dungeon map...")
    dungeon_map = {}
    for xcoord in range(d_width):
        for ycoord in range(d_height):
            # creates a dungeon tile with an x,y coord and sets True.
            dungeon_map[xcoord, ycoord] = "wall"
    print("map generated!")
    return dungeon_map


def init_rooms(room_number):
    """
    This function creates a dictonary of rooms with the room number,
    length and height.
    The number of rooms added is dependant upon the dungeon_size() function.
    Rooms have a random size betweem 4 and 6 tiles.
    Dungeon_width is called to allow for change of room size based
    on dungeon size.
    """
    rooms = {}
    for room in range(room_number):
        room_height = random.randint(4, 6)
        room_width = random.randint(4, 6)
        rooms[room] = f"room {room}", room_height, room_width
    return rooms


def position_rooms(rooms, dungeon_map, dungeon_width, dungeon_height):
    """
    This function puts the rooms generated in the init_rooms function
    into the dungeon, rooms are added by changing the "wall" value in the
    dungeon_map dict to "room {number}".
    """

    for room in rooms:
        xcoord = random.randint(0, dungeon_width)
        ycoord = random.randint(0, dungeon_height)
        xcoord_b, ycoord_b = room_pos_check(xcoord, ycoord, dungeon_width, dungeon_height,
                             room, rooms)
        for xvar in range(rooms[room][1]):
            xnew = xcoord_b + xvar
            for yvar in range(rooms[room][2]):
                ynew = ycoord_b + yvar
                dungeon_map[xnew, ynew] = f"room {room}"
    print(dungeon_map)


def room_pos_check(xcoord, ycoord, dungeon_width, dungeon_height, room, rooms):
    """
    Makes sure that the rooms do not go outside the boundries of the map
    and that the edges (0 coordinates, end of map coordinates) are always
    walls
    """
    if xcoord == 0:
        xcoord = 1
    if ycoord == 0:
        ycoord = 1
    if xcoord + rooms[room][1] >= dungeon_width:
        xcoord = dungeon_width - rooms[room][1] - 1

    if ycoord + rooms[room][2] >= dungeon_height:
        ycoord = dungeon_height - rooms[room][2] - 1
    # print(f"y min {ycoord}, y max {ycoord + rooms[room][2]}")
    # print(f"x min {xcoord}, x max {xcoord + rooms[room][1]}")
    return xcoord, ycoord


def main():
    """
    main function to call other functions
    """
    dungeon_size()


main()
